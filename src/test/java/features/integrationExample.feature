@THIRD_PARTIES
Feature: User Management with third integration Example

  Background:
    Given url baseUrl
    * configure headers = { 'x-api-key': '#(apiKey)' }

  @POST @CALL_AUTH0
  Scenario Outline: Create user with Auth0 as intermediate
    Given path 'api/users'
    * def auht0 = call read("integrations/auth0Example.feature@USER") {email: '<email>'}
    * def body = read("classpath:templates/postUserBody.json")
    * set body.name = auht0.userName
    * set body.job = "<job>"
    And request body
    When method POST
    * karate.embed(response, 'Plain text')
    Then status 201
    * match $ == read("classpath:schemas/postUserSchema.json")
    * match $ contains {name: '#(auht0.userName)', job: '<job>'}
    Examples:
      | email                         | job    |
      | williammontenegro4d@gmail.com | leader |

  @POST @CALL_MAILSAC
  Scenario Outline: Create user with Mailsac as intermediate
    Given path 'api/users'
    * def mailsac = call read("integrations/mailsacExample.feature") {email: '<email>'}
    * def body = read("classpath:templates/postUserBody.json")
    * set body.name = mailsac.name
    * set body $.message = mailsac.message
    * set body.job = "<job>"
    And request body
    When method POST
    * karate.embed(response, 'Plain text')
    Then status 201
    * match $ == read("classpath:schemas/postUserSchema.json")
    * match $ contains {name: '#(mailsac.name)', message: '#(mailsac.message)', job: '<job>'}
    Examples:
      | email            | job    |
      | pazd@mailsac.com | tester |

  @POST @CSV_OUTLINE
  Scenario Outline: Create multiples user with information from csv
    Given path 'api/users'
    * def body = read("classpath:templates/postUserBody.json")
    * set body.name = "<name>"
    * set body.job = "<job>"
    And request body
    When method POST
    * karate.embed(response, 'Plain text')
    Then status 201
    * match $ contains {name: '#(name)', job: '#(job)'}
    Examples:
      | read('classpath:data/usersInfo.csv') |

  @POST @CSV_FILTER
  Scenario: Create user with filter from csv
    Given path 'api/users'
    * def csv = read('classpath:data/usersInfo.csv')
    * def user = get[0] csv[?(@.filter=='true')]
    * def body = read("classpath:templates/postUserBody.json")
    * set body.name = user.name
    * set body.job = user.job
    And request body
    When method POST
    * karate.embed(response, 'Plain text')
    Then status 201
    * match $ contains {name: '#(user.name)', job: '#(user.job)'}

  @POST @JS_FAKER
  Scenario: Create user with data generated by faker
    Given path 'api/users'
    * def faker = call read('classpath:utils/generate-faker.js')
    * def body = read("classpath:templates/postUserBody.json")
    * set body.name = faker.name
    * set body.job = faker.job
    * set body $.message = faker.message
    And request body
    When method POST
    * karate.embed(response, 'Plain text')
    Then status 201
    * match $ contains {name: '#(faker.name)', message: '#(faker.message)', job: '#(faker.job)'}